ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
{v = 20}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
(v:int)|{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
(v:int)
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
{v = 20}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = 0}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:1

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
{v = v + 1}
]

Symbol table: v:0

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:2

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
{v = v + 1}
]

Symbol table: v:1

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: 
Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:3

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]

Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
{v = v + 1}
]

Symbol table: v:2

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}
]
[
{v = v * 10}
]

Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: 
Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}
]

Symbol table: v:30

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: v:30

Output list: 0
1
2
30

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 2
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 3
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 5
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 6
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 7
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 

Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(w:int)
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{v = 2}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{w = 5}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
call sum[v * 10, w]
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 

Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(w:int)
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{v = 2}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{w = 5}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
call sum[v * 10, w]
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 

Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(w:int)
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{v = 2}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{w = 5}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
call sum[v * 10, w]
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 

Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(w:int)
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{v = 2}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{w = 5}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
call sum[v * 10, w]
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: 
----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(v:int)
]

Symbol table: 

Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
(w:int)|{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
(w:int)
]

Symbol table: v -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
{v = 2}|{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{v = 2}
]

Symbol table: v -> 0
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
{w = 5}|call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
{w = 5}
]

Symbol table: v -> 2
w -> 0


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
call sum[v * 10, w]|Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
call sum[v * 10, w]
]

Symbol table: v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]
[
(v:int)|{v = a + b}|Print{v}
]

Symbol table: a -> 20
b -> 5

v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]
[
{v = a + b}|Print{v}
]
[
(v:int)
]

Symbol table: a -> 20
b -> 5

v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]
[
{v = a + b}|Print{v}
]

Symbol table: a -> 20
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]
[
Print{v}
]
[
{v = a + b}
]

Symbol table: a -> 20
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]
[
Print{v}
]

Symbol table: a -> 20
b -> 5
v -> 25

v -> 2
w -> 5


Output list: 
File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
return
]

Symbol table: a -> 20
b -> 5
v -> 25

v -> 2
w -> 5


Output list: 25

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Print{v}|Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 25

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]
[
Print{v}
]

Symbol table: v -> 2
w -> 5


Output list: 25

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
call product[v, w]|Fork{
call sum[v, w]
}
}
]

Symbol table: v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
call product[v, w]|Fork{
call sum[v, w]
}
]

Symbol table: v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
call product[v, w]
]

Symbol table: v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]
[
(v:int)|{v = a * b}|Print{v}
]

Symbol table: a -> 2
b -> 5

v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]
[
{v = a * b}|Print{v}
]
[
(v:int)
]

Symbol table: a -> 2
b -> 5

v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]
[
{v = a * b}|Print{v}
]

Symbol table: a -> 2
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]
[
Print{v}
]
[
{v = a * b}
]

Symbol table: a -> 2
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]
[
Print{v}
]

Symbol table: a -> 2
b -> 5
v -> 10

v -> 2
w -> 5


Output list: 25
2

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]
[
return
]

Symbol table: a -> 2
b -> 5
v -> 10

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
call sum[v, w]
}
]

Symbol table: v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
call sum[v, w]
]

Symbol table: v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]
[
(v:int)|{v = a + b}|Print{v}
]

Symbol table: a -> 2
b -> 5

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]
[
{v = a + b}|Print{v}
]
[
(v:int)
]

Symbol table: a -> 2
b -> 5

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]
[
{v = a + b}|Print{v}
]

Symbol table: a -> 2
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]
[
Print{v}
]
[
{v = a + b}
]

Symbol table: a -> 2
b -> 5
v -> 0

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]
[
Print{v}
]

Symbol table: a -> 2
b -> 5
v -> 7

v -> 2
w -> 5


Output list: 25
2
10

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: [
return
]

Symbol table: a -> 2
b -> 5
v -> 7

v -> 2
w -> 5


Output list: 25
2
10
7

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

ID: 3
Execution stack: 
Symbol table: v -> 2
w -> 5


Output list: 25
2
10
7

File table: 
Heap table: 
Procedure table: product -> Params: [a, b], Statement: (v:int)|{v = a * b}|Print{v}
sum -> Params: [a, b], Statement: (v:int)|{v = a + b}|Print{v}

----------------------------------------------------

