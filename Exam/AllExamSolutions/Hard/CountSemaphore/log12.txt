ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
{v = 20}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
(v:int)|{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
(v:int)
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
(v:int)
]

Symbol table: 
Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = 20}|for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]
[
{v = 20}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}|{v = v * 10}|Print{v}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
for(v=0;v<3;v=v + 1){Fork{
Print{v}|{v = v + 1}
}}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
{v = 0}|while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = 0}
]

Symbol table: v:20

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:1

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:0

Output list: 
File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: [
{v = v + 1}
]

Symbol table: v:0

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:2

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:1

Output list: 0

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: [
{v = v + 1}
]

Symbol table: v:1

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]
[
Fork{
Print{v}|{v = v + 1}
}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 3
Execution stack: 
Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]
[
{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
Print{v}|{v = v + 1}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]
[
while(v < 3) {
Fork{
Print{v}|{v = v + 1}
}|{v = v + 1}
}
]

Symbol table: v:3

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
{v = v + 1}
]
[
Print{v}
]

Symbol table: v:2

Output list: 0
1

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
{v = v * 10}|Print{v}
]

Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: [
{v = v + 1}
]

Symbol table: v:2

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}
]
[
{v = v * 10}
]

Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 4
Execution stack: 
Symbol table: v:3

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
Print{v}
]

Symbol table: v:30

Output list: 0
1
2

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: v:30

Output list: 0
1
2
30

File table: 
Heap table: 
----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)|New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
(v1:Ref(int))
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)|New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
(cnt:int)
]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:0
v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
New{v1, 1}
]

Symbol table: cnt:0
v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:0
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
createSemaphore(cnt, ReadHeap{v1})
]

Symbol table: cnt:0
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: [
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 10}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1}}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1} - 1}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 10}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 100

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 2}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 100

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1}}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9
200

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9
200

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)|New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
(v1:Ref(int))
]

Symbol table: 
Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)|New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
(cnt:int)
]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 1}|createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:0
v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
New{v1, 1}
]

Symbol table: cnt:0
v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
createSemaphore(cnt, ReadHeap{v1})|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:0
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
createSemaphore(cnt, ReadHeap{v1})
]

Symbol table: cnt:0
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}|Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}|acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: [
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]
[
Fork{
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
acquire(cnt)|Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
acquire(cnt)|WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 10}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 1

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1}}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 
File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 2
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [2])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [])

----------------------------------------------------

ID: 1
Execution stack: [
Print{ReadHeap{v1} - 1}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1} - 1}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
acquire(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [1])

----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}|WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 10}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 10

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 2}|Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 100

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]
[
WriteHeap{v1, ReadHeap{v1} * 2}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 100

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v1}}|release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
release(cnt)
]
[
Print{ReadHeap{v1}}
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

ID: 3
Execution stack: [
release(cnt)
]

Symbol table: cnt:1
v1:(1 -> int)

Output list: 10
9
200

File table: 
Heap table: 1 -> 200

Semaphore table: 1 -> (1, [3])

----------------------------------------------------

